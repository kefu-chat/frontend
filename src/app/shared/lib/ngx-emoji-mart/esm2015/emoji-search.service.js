import { Injectable } from "@angular/core";
import { categories, EmojiService } from "@shared/lib/ngx-emoji-mart/ngx-emoji";
import { intersect } from "./utils";
import * as i0 from "@angular/core";
import * as i1 from "@shared/lib/ngx-emoji-mart/ngx-emoji";
export class EmojiSearch {
  constructor(emojiService) {
    this.emojiService = emojiService;
    this.originalPool = {};
    this.index = {};
    this.emojisList = {};
    this.emoticonsList = {};
    this.emojiSearch = {};
    for (const emojiData of this.emojiService.emojis) {
      const { shortNames, emoticons } = emojiData;
      const id = shortNames[0];
      emoticons.forEach((emoticon) => {
        if (this.emoticonsList[emoticon]) {
          return;
        }
        this.emoticonsList[emoticon] = id;
      });
      this.emojisList[id] = this.emojiService.getSanitizedData(id);
      this.originalPool[id] = emojiData;
    }
  }
  addCustomToPool(custom, pool) {
    custom.forEach((emoji) => {
      const emojiId = emoji.id || emoji.shortNames[0];
      if (emojiId && !pool[emojiId]) {
        pool[emojiId] = this.emojiService.getData(emoji);
        this.emojisList[emojiId] = this.emojiService.getSanitizedData(emoji);
      }
    });
  }
  search(
    value,
    emojisToShowFilter,
    maxResults = 75,
    include = [],
    exclude = [],
    custom = []
  ) {
    this.addCustomToPool(custom, this.originalPool);
    let results;
    let pool = this.originalPool;
    if (value.length) {
      if (value === "-" || value === "-1") {
        return [this.emojisList["-1"]];
      }
      if (value === "+" || value === "+1") {
        return [this.emojisList["+1"]];
      }
      let values = value.toLowerCase().split(/[\s|,|\-|_]+/);
      let allResults = [];
      if (values.length > 2) {
        values = [values[0], values[1]];
      }
      if (include.length || exclude.length) {
        pool = {};
        categories.forEach((category) => {
          var _a;
          const isIncluded =
            include && include.length
              ? include.indexOf(category.id) > -1
              : true;
          const isExcluded =
            exclude && exclude.length
              ? exclude.indexOf(category.id) > -1
              : false;
          if (!isIncluded || isExcluded) {
            return;
          }
          (_a = category.emojis) === null || _a === void 0
            ? void 0
            : _a.forEach((emojiId) => {
                var _a;
                // Need to make sure that pool gets keyed
                // with the correct id, which is why we call emojiService.getData below
                const emoji = this.emojiService.getData(emojiId);
                pool[
                  (_a =
                    emoji === null || emoji === void 0 ? void 0 : emoji.id) !==
                    null && _a !== void 0
                    ? _a
                    : ""
                ] = emoji;
              });
        });
        if (custom.length) {
          const customIsIncluded =
            include && include.length ? include.indexOf("custom") > -1 : true;
          const customIsExcluded =
            exclude && exclude.length ? exclude.indexOf("custom") > -1 : false;
          if (customIsIncluded && !customIsExcluded) {
            this.addCustomToPool(custom, pool);
          }
        }
      }
      allResults = values
        .map((v) => {
          let aPool = pool;
          let aIndex = this.index;
          let length = 0;
          // tslint:disable-next-line: prefer-for-of
          for (let charIndex = 0; charIndex < v.length; charIndex++) {
            const char = v[charIndex];
            length++;
            if (!aIndex[char]) {
              aIndex[char] = {};
            }
            aIndex = aIndex[char];
            if (!aIndex.results) {
              const scores = {};
              aIndex.results = [];
              aIndex.pool = {};
              for (const id of Object.keys(aPool)) {
                const emoji = aPool[id];
                if (!this.emojiSearch[id]) {
                  this.emojiSearch[id] = this.buildSearch(
                    emoji.short_names,
                    emoji.name,
                    emoji.id,
                    emoji.keywords,
                    emoji.emoticons
                  );
                }
                const query = this.emojiSearch[id];
                const sub = v.substr(0, length);
                const subIndex = query.indexOf(sub);
                if (subIndex !== -1) {
                  let score = subIndex + 1;
                  if (sub === id) {
                    score = 0;
                  }
                  aIndex.results.push(this.emojisList[id]);
                  aIndex.pool[id] = emoji;
                  scores[id] = score;
                }
              }
              aIndex.results.sort((a, b) => {
                const aScore = scores[a.id];
                const bScore = scores[b.id];
                return aScore - bScore;
              });
            }
            aPool = aIndex.pool;
          }
          return aIndex.results;
        })
        .filter((a) => a);
      if (allResults.length > 1) {
        results = intersect.apply(null, allResults);
      } else if (allResults.length) {
        results = allResults[0];
      } else {
        results = [];
      }
    }
    if (results) {
      if (emojisToShowFilter) {
        results = results.filter((result) => {
          if (result && result.id) {
            return emojisToShowFilter(this.emojiService.names[result.id]);
          }
          return false;
        });
      }
      if (results && results.length > maxResults) {
        results = results.slice(0, maxResults);
      }
    }
    return results || null;
  }
  buildSearch(shortNames, name, id, keywords, emoticons) {
    const search = [];
    const addToSearch = (strings, split) => {
      if (!strings) {
        return;
      }
      (Array.isArray(strings) ? strings : [strings]).forEach((str) => {
        (split ? str.split(/[-|_|\s]+/) : [str]).forEach((s) => {
          s = s.toLowerCase();
          if (!search.includes(s)) {
            search.push(s);
          }
        });
      });
    };
    addToSearch(shortNames, true);
    addToSearch(name, true);
    addToSearch(id, true);
    addToSearch(keywords, true);
    addToSearch(emoticons, false);
    return search.join(",");
  }
}
EmojiSearch.ɵprov = i0.ɵɵdefineInjectable({
  factory: function EmojiSearch_Factory() {
    return new EmojiSearch(i0.ɵɵinject(i1.EmojiService));
  },
  token: EmojiSearch,
  providedIn: "root",
});
EmojiSearch.decorators = [{ type: Injectable, args: [{ providedIn: "root" }] }];
EmojiSearch.ctorParameters = () => [{ type: EmojiService }];
//# sourceMappingURL=data:application/json;base64,
